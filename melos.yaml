name: app

packages:
  - packages/**
  - .

scripts:
  decrypt-secrets:
    description: Decrypt secrets
    run: bash scripts/decrypt-secrets.sh

  build_and_test:
    description: GA main script
    run: bash scripts/build_and_test.sh

  codegen:
    description: Generate code for all packages
    run: melos run codegen:build_runner --no-select && melos run codegen:locale --no-select
    failFast: true

  codegen:build_runner:
    description: Generate code for all packages using build_runner
    # We have to delete all generated by flutter_gen code prior generation because it doesn't
    # support incremental generation, nor it supports deleting files that are not needed anymore
    exec: "find . -type f -name \"*.gen.dart\" -delete && dart run build_runner build --delete-conflicting-outputs"
    # concurrency set to ONE because we SHOULD generate all code for packages prior we
    # started generation for the app
    concurrency: 1
    failFast: true
    packageFilters:
      dependsOn: "build_runner"

  codegen:locale:
    description: Generate localizations code for all packages
    exec: dart run easy_localization:generate  --source-dir assets/translations -f keys --output-file locale_keys.g.dart && dart format lib/generated/locale_keys.g.dart
    failFast: true
    packageFilters:
      dependsOn: "easy_localization"

  analyze:
    description: Analyze all packages
    run: melos run analyze_subpackages_custom_lint --no-select && melos run analyze_subpackages --no-select
    failFast: true

  analyze_subpackages:
    description: Analyze a specific package in this project.
    exec: flutter analyze .
    failFast: true

  analyze_subpackages_custom_lint:
    description: Analyze a specific package in this project.
    exec: dart run custom_lint
    failFast: true
    packageFilters:
      dependsOn: "custom_lint"

  check-format:
    description: Check the format of a specific package in this project.
    exec: dart format --set-exit-if-changed .
    failFast: true

  test:
    description: Run all Dart & Flutter tests in this project.
    run: melos run test:dart --no-select && melos run test:flutter --no-select

  test:dart:
    description: Run Dart tests for a specific package in this project.
    exec: "dart test test"
    concurrency: 1
    failFast: true
    packageFilters:
      flutter: false
      dirExists: test

  test:flutter:
    description: Run Flutter tests for a specific package in this project.
    exec: "flutter test test"
    concurrency: 1
    failFast: true
    packageFilters:
      flutter: true
      dirExists: test

  test:integration:
    description: Run Flutter teintegration teststs for a specific package in this project.
    # TODO(nesquikm): Maybe we should separate integration_test for the app and packages
    # because packages may not use flavors at all
    exec: "flutter test --flavor production integration_test"
    concurrency: 1
    failFast: true
    packageFilters:
      flutter: true
      dirExists: integration_test

  check-all:
    description: Prepare to commit by checking all things
    run: melos check-format && melos analyze && melos test && melos test:integration
    failFast: true

  build:storybook:
    description: Build the storybook
    run: bash scripts/build-storybook.sh

  build:ios_match_assure:
    description: Making sure the iOS certificates and profiles are installed
    run: bash scripts/ios-match-assure.sh

  build:ios_match_new_devices:
    description: Registering new devices already added through devportal
    run: bash scripts/ios-match-new-devices.sh

  build:deploy_fad:
    description: Build and deploy to FAD
    run: bash scripts/build.sh fad

  build:deploy_store:
    description: Build and deploy to Testflight and Google Play internal
    run: bash scripts/build.sh store

  build:deploy_ios_fad:
    description: Build and deploy to IOS FAD
    run: bash scripts/build.sh ios_fad

  build:deploy_ios_store:
    description: Build and deploy to Test Flight
    run: bash scripts/build.sh ios_store

  build:deploy_android_fad:
    description: Build and deploy to Android FAD
    run: bash scripts/build.sh android_fad

  build:deploy_android_store:
    description: Build and deploy to Google Play
    run: bash scripts/build.sh android_store

command:
  clean:
    hooks:
      post: bash scripts/clean.sh
